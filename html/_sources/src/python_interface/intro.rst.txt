.. _sec-python:

介绍
==============

Mitsuba 2 为系统中的几乎每一个函数都提供了极其细颗粒度的 Python 绑定。这样就可以将渲染器导入到 Jupyter notebook 中，
从而可以通过交互方式开发新的算法，并用曲线图可视化它们的行为。

光线求交、BSDF 估算和光源以及许多其他系统组件可以通过高效的矢量化接口进行查询和采样，从而能够设计不一定
将渲染图作为输出的非传统应用程序。绑定模糊了 C++ 和 Python 世界之间的界限：例如，可以使用 Python 实现
一个新的 Mitsuba 插件（例如 BSDF），并使用它来渲染图像，其中大多数渲染代码都在 C++ 中运行。 有几个 Mitsuba 
变体重度依赖 JIT 编译，这样的 Python 扩展是与系统的其他 C++ 部分一起进行 JIT 编译的。

Mitsuba 的自动化测试套件完全是用 Python 编写的，这确保了 Python 绑定的完整性和正确性，
同时也提供了优秀的 Python 示例代码。

这一节的其余部分提供了大量有关使用 Python API 的示例，并指明了附加信息来源。现在，我们主要关注绑定在“正向”渲染中
的应用。另有一组教程介绍了可微渲染和逆渲染的应用。

Importing the renderer
----------------------

Mitsuba 2附带了许多种不同的系统变体，每个变体都提供了一组自己的 Python 绑定，由于替换了函数签名类型，
这些绑定之间互不相同。

要将 Mitsuba 导入到 Python 中，首先必须导入 ``mitsuba``  模块并设置所需的变体。 在此之后，可
以导入特定的类。

.. code-block:: python

    import mitsuba

    mitsuba.set_variant('gpu_autodiff_spectral')

    # set_variant() call must precede the following two lines
    from mitsuba.core import FileStream
    from mitsuba.render import Integrator

Mitsuba 公开了一个 *虚拟 Python* 模块，该模块能够动态的解析导入语句到正确的位置。(比如通过 ``set_variant()`` 指定)。 
变体名称可以随时更改，然后将应用于未来的导入。变体的名称是每个线程的属性多个独立的线程可以在不同的变体中执行代码。

为了与可用变体交互，在 Python 中提供了其他辅助函数。

.. code-block:: python

    # Returns the list of available system variants
    mitsuba.variants() # e.g. ['scalar_rgb', 'gpu_autodiff_spectral']

    # Returns the name of the current variant
    mitsuba.variant() # e.g. 'gpu_autodiff_spectral'

如何在导入 ``mitsuba`` Python 模块时设置自动激活的变体呢？可以在 ``mitsuba.conf`` 文件里的
 ``python-default`` 中进行设置。按照这种方法操作之后，除非需要另一种变体，否则不再需要调用 ``mitsuba.set_variant(..)`` 了。


API documentation
-----------------

作为本文档的一部分，我们提供了丰富的 API 文档。详情请参阅 :ref:`sec-api` 。

除此之外，还可以使用 ``help()`` 函数获取有关类、函数的相关信息，通过这种方式获得 Python 绑定的文档字符串：

.. code-block:: python

    import mitsuba
    mitsuba.set_variant('scalar_rgb')
    help(mitsuba.core.Bitmap)

    # Output:
    # class Bitmap(Object)
    # |  General-purpose bitmap class with read and write support for several
    # |  common file formats.
    # |
    # |  This class handles loading of PNG, JPEG, BMP, TGA, as well as OpenEXR
    # |  files, and it supports writing of PNG, JPEG and OpenEXR files.
    # |
    # |  PNG and OpenEXR files are optionally annotated with string-valued
    # |  metadata, and the gamma setting can be stored as well. Please see the
    # |  class methods and enumerations for further detail.
    # |
    # ...


Basic arithmetic types
----------------------

Mitsuba 在基本算术类型、数学操作、向量、矩阵等方面重度依赖 `Enoki
<https://enoki.readthedocs.io/en/master/intro.html>`_ 库。
Enoki 在 C++ 和 Python 端都有使用，推荐在开发任何 Mitsuba 代码之前先阅读一下 Enoki 的文档。

需要注意的一点是，像浮点数、向量等基本类型依赖于当前变体。方便起见，Mitsuba 提供了这些类型的别名。
例如，参考下面示例代码片段：

.. code-block:: python

    import mitsuba
    mitsuba.set_variant('scalar_rgb')
    from mitsuba.core import Float

导入的 ``Float`` 类型只是一个简单的 Python 内置 ``float``，因为渲染器是在 scalar 变体模式下运行的。
更复杂的类型将在矢量化的 ``packet_*`` 或 ``gpu_*`` 后端使用，并且这些也会传播到派生的数组类型中，如向
量或矩阵中。

.. code-block:: python

    mitsuba.set_variant('packet_rgb')
    from mitsuba.core import Float, Vector3f
    # Float    = enoki.dynamic.Float32  (a.k.a. enoki::DynamicArray<Packet<float>>)
    # Vector3f = enoki.dynamic.Vector3f (a.k.a. enoki::Array<DynamicArray<Packet<float>, 3>>)

    mitsuba.set_variant('gpu_rgb')
    from mitsuba.core import Float, Vector3f
    # Float    = enoki.cuda.Float32  (a.k.a. enoki::CUDAArray<float>)
    # Vector3f = enoki.cuda.Vector3f (a.k.a. enoki::Array<enoki::CUDAArray<float>, 3>>)

在某些情况下，可能希望使用 *标量的* 数值和向量，甚至用在矢量化后端中。在这种情况下，只需在任何类型名称之前添加 ``Scalar`` 前缀。

.. code-block:: python

    mitsuba.set_variant('gpu_rgb')
    from mitsuba.core import ScalarFloat, ScalarVector3f
    # ScalarFloat    = float
    # ScalarVector3f = enoki.scalar.Vector3f (a.k.a. enoki::Array<float, 3>>)

总而言之，提供了以下基本类型：

.. figtable::
    :label: table-basic-types
    :caption: 此表列出了 Mitsuba 的内置算术和数组类型。

    .. list-table::
        :widths: 17 30
        :header-rows: 1

        * - Type name
          - Description
        * - ``Mask``
          - Result of a comparison involving an arithmetic type like ``Float``.
        * - ``Float``
          - Default floating point type (which could be single or double precision)
        * - ``Float32``
          - Single precision floating point type
        * - ``Float64``
          - Double precision floating point type
        * - ``UInt32``
          - Unsigned 32-bit integer
        * - ``Int32``
          - Signed 32-bit integer
        * - ``UInt64``
          - Unsigned 64-bit integer
        * - ``Int64``
          - Signed 64-bit integer
        * - ``Normal3f``
          - 3D normal vector
        * - ``Color[0-4]f``
          - Color vector with floating point components of the default precision (0 to 4 dimensions).
        * - ``Vector[0-4]f``
          - Vector with floating point components of the default precision (0 to 4 dimensions)
        * - ``Point[0-4]f``
          - Point with floating point components of the default precision (0 to 4 dimensions)
        * - ``Vector[0-4]i``
          - Vector with signed 32-bit integer components (0 to 4 dimensions)
        * - ``Point[0-4]i``
          - Point with signed 32-bit integer components (0 to 4 dimensions)
        * - ``Vector[0-4]u``
          - Vector with unsigned signed 32-bit integer components (0 to 4 dimensions)
        * - ``Point[0-4]u``
          - Point with unsigned signed 32-bit integer components (0 to 4 dimensions)
        * - ``Matrix[2-4]f``
          - Matrix with floating point components of the default precision (2 to 4 dimensions)

在下面的 Python 代码片段中，我们展示了如何依赖变体的选择使用这些别名编写可以在 CPU 或 GPU 上运行的通用代码。

.. code-block:: python

    import enoki as ek
    import mitsuba

    # Choose the variant
    mitsuba.set_variant('packet_rgb') # also works on the GPU, e.g. with 'gpu_rgb'

    from mitsuba.core import Float, UInt64, Vector2f, PCG32

    # PCG32 is a pseudo-random number generator.
    # Configure it for returning 1000 values at a time
    rng = PCG32(initseq=ek.arange(UInt64, 1000))

    # Generate 1000 uniform random variates on [0, 1]^2
    samples = Vector2f(rng.next_float32(), rng.next_float32())

    # Warp the uniform variates into uniformly distributed points on the sphere
    pos = mitsuba.core.warp.square_to_uniform_sphere(samples)


NumPy and PyTorch integration
-----------------------------

Enoki 序列与标准 Python 序列库比如 NumPy，PyTorch 之间的交互。例如，在前面的示例中，我们
可以将 ``samples`` 变量的赋值替换为：

.. code-block:: python

    import numpy as np
    samples = np.random.random((sample_count, 2))

随后的 ``square_to_uniform_sphere`` 调用将执行隐式转换。同样，Enoki 序列可以转换为 PyTorch 或 NumPy 序
列，随后可以使用 Matplotlib 等库进行绘制。

Submodules
----------

Mitsuba Python 绑定分为三个子模块：

.. list-table::
    :widths: 30 70
    :header-rows: 1

    * - Submodule name
      - Description
    * - ``mitsuba.core``
      - Python bindings for the :monosp:`libcore` C++ library, which contains
        core functionality that is not directly related to rendering
        algorithms. (→ :ref:`sec-api-core`)
    * - ``mitsuba.render``
      - Python bindings for the :monosp:`librender` C++ library, which contains
        interfaces of components like rendering algorithms, sensors, emitters,
        textures, participating media, etc. (→ :ref:`sec-api-render`)
    * - ``mitsuba.python``
      - Higher-level functionality that is developed in Python: infrastructure
        for automatic differentiation, testing (Chi^2 test), etc. (→
        :ref:`sec-api-python`)

随后 :ref:`API reference <sec-api>` 章节提供了有关其内容的更多详细信息。

